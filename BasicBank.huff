/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define constant BALANCE_SLOT = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_SLOT = FREE_STORAGE_POINTER()

// dev env
//#define constant BALANCE_OF_SIG = 0x70a08231
//#define constant WITHDRAW_SIG = 0x2e1a7d4d
//#define constant CALLER = 0x34A1D3fff3958843C43aD80F30b94c510645C316
// #define macro FALLBACK() = {
//  0x01 0x00
//  mstore
//  0x20 0x00
//  return
// }

#define macro ERROR(error_location) = takes(1) returns(0) {
  <error_location>
  jumpi
}

#define macro USER_BALANCE() = takes(0) returns (0) {
  // not used
}

#define macro ADDRESS_MASK() = takes(1) returns(1) {
  0xffffffffffffffffffffffffffffffffffffffff
  and
}

#define macro ADDRESS_STORE() = takes(0) returns (0) {
  caller ADDRESS_MASK() 0x00
  mstore

  [BALANCE_SLOT] 0x20
  mstore
}

#define macro CALLER(err0rcode) = takes(0) returns (0) {
  caller dup1 0x00 eq
  <err0rcode>
  jumpi
}

#define macro WITHDRAW(success, error) = takes(0) returns (0) {
    ADDRESS_STORE()

    0x40 0x00 sha3 
    dup1
    sload 

    // only if theres ether in bank
    dup1 0x04 calldataload swap1 dup2 // amount,balance, amount,balance, key
    gt // error c0de, amount, balance, key

    ERROR(throw_error) // amount, balance, key

    // deduct from balance
    dup1 swap2
    sub

    // update user balance
    swap1 swap2 // key, new balance, amount
    sstore

    dup1 [TOTAL_SUPPLY_SLOT] sload
    sub
    [TOTAL_SUPPLY_SLOT]
    sstore

    0x00 dup1 dup1 dup1 dup1 swap5 CALLER(<error>) 0xffff call // gas,caller,amount,0x00,0x00,0x00,0x00
    <success>
    jumpi
}

#define macro MAIN() = takes(0) returns(0) {
//  callvalue receive // jump if value not zero
//  jumpi
//  0x04 calldatasize lt -> 8 gas
//  callvalue iszero not -> 8 gas
//  or
//  receive
//  jumpi

//  pop
  0x00 calldataload 0xe0
  shr

  dup1 __FUNC_SIG(balanceOf) eq
  balanceOf
  jumpi

  dup1 __FUNC_SIG(withdraw) eq
  withdraw
  jumpi

  callvalue receive
  jumpi

  success:
    stop

  receive:
    ADDRESS_STORE() // doesn't work .. why?? .. should work now

    callvalue
    0x40 0x00 sha3
    sstore

    stop 

  balanceOf:
    ADDRESS_STORE()

    0x40 0x00 sha3 sload
    0x00
    mstore

    0x20 0x00
    return

  withdraw:
    WITHDRAW(success, throw_error)

  //  0x00 dup1 dup1 dup1 0xde0b6b3a7640000 caller 0xffff call // gas,caller,0x00,0x00,0x00,0x00, callvalue

    throw_error:
      0x00 dup1
      revert
}
